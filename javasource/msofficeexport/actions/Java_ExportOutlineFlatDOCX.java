// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package msofficeexport.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.xwpf.usermodel.XWPFAbstractNum;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFNumbering;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTAbstractNum;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTLvl;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSimpleField;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STNumberFormat;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * --- WORD EXPORT (OUTLINE BASED, flat JSON structure) ---
 * 
 * USAGE
 * 
 * • This module allows export from Mendix to Word (.docx) based on an outline given as JSON (flat structure).
 * • Find it as a Java action "Export to Word (Outline, flat)" in the Toolbox and place it in your microflow.
 * • When you double-click the action in your microflow, you will see the needed inputs and also some examples. Some inputs are described as REQUIRED there. If you do not fill in these inputs, you will get NullPointerException from the Java action. Other inputs are optional.
 * • This module demonstrates the usage, see the Domain Model, Examples and the demonstration microflow (ACT_ExportOutlineFlatDOCX).
 * 
 * WORD TEMPLATE
 * 
 * • You have to give a 1 page Word document that will be used as the template by the module.
 *   • The template can be just an empty Word document (without any contents).
 *   • You can put something in header and footer, it will be retained (like a company logo or a page numbering).
 * 
 * • "Latent styles" (the styles already present in the Word document) will be used for Title, Heading 1, Heading 2, Heading 3, paragraph.
 *   • In the case of bullet points, the round bullet point symbol will be used with a standard indentation. The text will by styled like a paragraph.
 * 
 * WORD CONTENTS
 * 
 * • Only 3 levels of headings are allowed (heading 1, heading 2, heading 3, which will result in Heading 1, Heading 2 Heading 3 styles)
 * • Only these types are allowed: title, heading 1, heading 2, heading 3, paragraph, points
 * • You can enable/disable generating a table of contents (TOC) with hyperlinks
 *   • If the TOC will be generated, everytime after opening the exported Word document, the user have to click on "Yes" in the pop-up window that will appear. If the user clicks "No", the TOC will not (re)generate and will be missing from the opened document.
 * • The first and final pages are optional, you can omit them from the JSON
 *  
 * • An example of the JSON document contents:
 * 
 * {
 *   "document_name": "My Document",
 *   "first_page": [
 *     {
 *       "type": "title",
 *       "content": "Introduction"
 *     },
 *     {
 *       "type": "heading 1",
 *       "content": "Welcome to the Document."
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "This document covers several topics."
 *     },
 *     {
 *       "type": "points",
 *       "items": [
 *         {
 *           "content": "Point 1: Overview of topics."
 *         },
 *         {
 *           "content": "Point 2: Detailed explanation."
 *         }
 *       ]
 *     }
 *   ],
 *   "pages": [
 *     {
 *       "type": "heading 1",
 *       "content": "Chapter 1"
 *     },
 *     {
 *       "type": "heading 2",
 *       "content": "Section 1.1"
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "This is a detailed explanation of Section 1.1."
 *     },
 *     {
 *       "type": "points",
 *       "items": [
 *         {
 *           "content": "First point of Section 1.1."
 *         },
 *         {
 *           "content": "Second point of Section 1.1."
 *         }
 *       ]
 *     },
 *     {
 *       "type": "heading 2",
 *       "content": "Section 1.2"
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "Further details in Section 1.2."
 *     },
 *     {
 *       "type": "heading 1",
 *       "content": "Chapter 2"
 *     },
 *     {
 *       "type": "heading 2",
 *       "content": "Section 2.1"
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "This section covers advanced topics."
 *     },
 *     {
 *       "type": "heading 3",
 *       "content": "Subsection 2.1.1"
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "In-depth analysis of Subsection 2.1.1."
 *     },
 *     {
 *       "type": "points",
 *       "items": [
 *         {
 *           "content": "Key point 1 of Subsection 2.1.1."
 *         },
 *         {
 *           "content": "Key point 2 of Subsection 2.1.1."
 *         }
 *       ]
 *     }
 *   ],
 *   "final_page": [
 *     {
 *       "type": "heading 1",
 *       "content": "Conclusion"
 *     },
 *     {
 *       "type": "paragraph",
 *       "content": "Summary of the document."
 *     },
 *     {
 *       "type": "points",
 *       "items": [
 *         {
 *           "content": "Final thought 1."
 *         },
 *         {
 *           "content": "Final thought 2."
 *         }
 *       ]
 *     }
 *   ]
 * }
 * 
 * IMAGE CREDITS
 * 
 * • Icon credits: document icons created by Driss Lebbat - Flaticon.
 */
public class Java_ExportOutlineFlatDOCX extends UserAction<IMendixObject>
{
	/** @deprecated use templateDocx.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __templateDocx;
	private final msofficeexport.proxies.TemplateDocx templateDocx;
	private final java.lang.String documentContentJson;
	private final java.lang.Boolean tableOfContentsEnable;
	private final java.lang.String tableOfContentsTitle;

	public Java_ExportOutlineFlatDOCX(
		IContext context,
		IMendixObject _templateDocx,
		java.lang.String _documentContentJson,
		java.lang.Boolean _tableOfContentsEnable,
		java.lang.String _tableOfContentsTitle
	)
	{
		super(context);
		this.__templateDocx = _templateDocx;
		this.templateDocx = _templateDocx == null ? null : msofficeexport.proxies.TemplateDocx.initialize(getContext(), _templateDocx);
		this.documentContentJson = _documentContentJson;
		this.tableOfContentsEnable = _tableOfContentsEnable;
		this.tableOfContentsTitle = _tableOfContentsTitle;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE

		IContext context = this.getContext();
		ILogNode logger = Core.getLogger("Java_ExportOutlineFlatDOCX");

        // Default input parameter values, trim spaces
		String inputTableOfContentsTitle = (this.tableOfContentsTitle != null) ? this.tableOfContentsTitle.trim() : "Table of Contents";

        /*
         * Apache POI limitation:
         * If we create a new document with "XWPFDocument document = new XWPFDocument();", Apache POI can not read the "latent styles" (default preexisting styles).
         * Workaround: store an empty Word document and open it.
         */

        // Load the template document
        InputStream templateInputStream = Core.getFileDocumentContent(context, templateDocx.getMendixObject());
        document = new XWPFDocument(templateInputStream);

        // Clear the existing contents of the template (retaining header/footer)
        while (this.document.removeBodyElement(0)) { }

        try {

            Document docParsed = parseJson(this.documentContentJson);

            if (docParsed.getFirstPage() != null) {
                processContentList(docParsed.getFirstPage());
                insertPageBreak();
            }

            if (Boolean.TRUE.equals(this.tableOfContentsEnable)) {
                createToc(inputTableOfContentsTitle);
                insertPageBreak();
            }

            processContentList(docParsed.getPages());

            if (docParsed.getFinalPage() != null) {
                insertPageBreak();
                processContentList(docParsed.getFinalPage());
            }

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            this.document.write(outputStream);

            // Create a Mendix file document
            String outputFileName = docParsed.getDocumentName() + ".docx";
            IMendixObject fileDocument = Core.instantiate(getContext(), "MSOfficeExport.ExportedDocument");
            InputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
            // This commits the object
            Core.storeFileDocumentContent(getContext(), fileDocument, outputFileName, inputStream);

            return fileDocument;

        } catch (IOException e) {
        	// This also validates the JSON and DOCX file
        	logger.error("Error while generating Word document: " + e.getClass().getName() + ": " + e.getMessage(), e);
        	throw new MendixRuntimeException("Error while generating Word document.", e);
        } finally {
        	this.document.close();
        }

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Java_ExportOutlineFlatDOCX";
	}

	// BEGIN EXTRA CODE

    private XWPFDocument document;

    /**
	 * This class is used to map the JSON structure of a document.
	 */
    private static class Document {
        @JsonProperty("document_name")
        private String documentName;

        @JsonProperty("first_page")
        private List<Content> firstPage;

        @JsonProperty("pages")
        private List<Content> pages;

        @JsonProperty("final_page")
        private List<Content> finalPage;

        // Getters
        public String getDocumentName() { return documentName; }
        public List<Content> getFirstPage() { return firstPage; }
        public List<Content> getPages() { return pages; }
        public List<Content> getFinalPage() { return finalPage; }
    }

    private static class Content {
        @JsonProperty("type")
        private String type;

        @JsonProperty("content")
        private String content;

        @JsonProperty("items")
        private List<Content> items;

        // Getters
        public String getType() { return type; }
        public String getContent() { return content; }
        public List<Content> getItems() { return items; }
    }

    /**
     * Parses the given JSON string into a {@link Document} object.
     *
     * <p>This method uses the Jackson library to deserialize the JSON string
     * into an instance of the {@link Document} class. The JSON structure is expected
     * to match the structure of the {@link Document} class, including nested
     * content elements.</p>
     *
     * @param jsonString the JSON string representing the document content. It should be properly
     *                   formatted and follow the expected structure for deserialization.
     * @return a {@link Document} object containing the parsed data from the JSON string.
     * @throws Exception if there is an error during the parsing process, such as
     *                   malformed JSON or mismatched structure.
     */
    private Document parseJson(String jsonString) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(jsonString, Document.class);
    }

    /**
     * Processes a list of {@link Content} objects and generates the corresponding
     * elements in the Word document based on their type.
     *
     * <p>This method iterates over a list of {@link Content} objects, determines the content type,
     * and generates the appropriate elements in the Word document (e.g., titles, headings, paragraphs,
     * and bulleted lists).</p>
     *
     * @param contents the list of {@link Content} objects to be processed. Each object represents
     *                 an element of the document, such as a title, heading, paragraph, or list.
     */
    private void processContentList(List<Content> contents) {
        if (contents == null) return;

        for (Content content : contents) {
            switch (content.getType()) {
                case "title":
                    createParagraph(content.getContent(), "Title");
                    break;
                case "heading 1":
                case "heading 2":
                case "heading 3":
                    createParagraph(content.getContent(), content.getType());
                    break;
                case "paragraph":
                    createParagraph(content.getContent(), "Normal");
                    break;
                case "points":
                    if (content.getItems() != null) {
                        List<String> points = new ArrayList<>();
                        for (Content point : content.getItems()) {
                            points.add(point.getContent());
                        }
                        createBulletedList(points);
                    }
                    break;
                default:
                    // Type unknown
                    Core.getLogger("Java_ExportOutlineFlatDOCX").warn("Type " + content.getType() +
                        " unknown, the content " + content.getContent() + " not exported.");
                    break;
            }
        }
    }

    /**
     * Creates a paragraph in the provided XWPFDocument with the specified text and style.
     *
     * <p>
     * Apache POI feature:
     * <ul>
     *     <li>The argument StyleId in the method {@code .setStyle(<StyleId>)} does not use English names but uses the names of the user's Word installation language.</li>
     *     <li>Moreover, the local names may not be correct, e.g., they may be missing letters with diacritics.</li>
     *     <li>Example: If the user has a Czech Word installed, this method accepts "Nzev" instead of "Title". The visible style name in Word is "Název".</li>
     *     <li>What we need to do is convert a standard international style "name" to the local "styleId".</li>
     * </ul>
     * </p>
     *
     * @param text      the text content to be inserted into the paragraph
     * @param styleName the style name (as per the user's Word installation language) to be applied to the paragraph. Only what is visible in Word styles (in the Word application) can be used as a styleName
     */
    private void createParagraph(String text, String styleName) {
        XWPFParagraph paragraph = this.document.createParagraph();
        XWPFRun paragraphRun = paragraph.createRun();
        paragraphRun.setText(text);
        paragraph.setStyle(this.document.getStyles().getStyleWithName(styleName).getStyleId());
    }

    /**
     * Creates a table of contents (TOC) in the document.
     *
     * <p>This method adds a title for the TOC and then inserts the TOC field into the document.
     * The TOC field is configured to include hyperlinks to the sections in the document.
     *
     * <p>For more details on TOC field codes, see the <a href="https://support.microsoft.com/en-us/office/field-codes-toc-table-of-contents-field-1f538bc4-60e6-4854-9f64-67754d78d05c?ui=en-us&rs=en-us&ad=us">Microsoft documentation</a>.
     *
     * @param title the title to be displayed above the table of contents
     */
    private void createToc(String title) {
        createParagraph(title, "heading 1");
        XWPFParagraph tocParagraph = this.document.createParagraph();
        CTP ctP = tocParagraph.getCTP();
        CTSimpleField toc = ctP.addNewFldSimple();
        toc.setInstr("TOC \\h Hyperlinks");
        toc.setDirty(true);
    }

    /**
     * Creates a bulleted list in the document from a list of strings.
     *
     * <p>This method sets up the bullet point numbering format and adds each string
     * from the provided list as a bullet point in the document. Each bullet point is created
     * as a paragraph with the "Normal" style, and the text is set according to the
     * provided list of points.
     *
     * @param points a list of strings where each string represents an individual bullet point
     *               to be added to the document.
     */
    private void createBulletedList(List<String> points) {
        // Create numbering for bullet points
        XWPFNumbering numbering = this.document.createNumbering();
        CTAbstractNum ctAbstractNum = CTAbstractNum.Factory.newInstance();
        ctAbstractNum.setAbstractNumId(BigInteger.valueOf(0));

        CTLvl cTLvl = ctAbstractNum.addNewLvl();
        cTLvl.setIlvl(BigInteger.valueOf(0)); // Level of the bullet point (0 is the top level)
        cTLvl.addNewNumFmt().setVal(STNumberFormat.BULLET); // Default bullet format
        cTLvl.addNewLvlText().setVal("•"); // Default bullet character
        cTLvl.addNewStart().setVal(BigInteger.valueOf(1));

        // Set the paragraph's left indent
        cTLvl.addNewPPr().addNewInd().setLeft(BigInteger.valueOf(720));
        cTLvl.getPPr().getInd().setHanging(BigInteger.valueOf(360));

        XWPFAbstractNum abstractNum = new XWPFAbstractNum(ctAbstractNum);
        BigInteger abstractNumID = numbering.addAbstractNum(abstractNum);

        BigInteger numID = numbering.addNum(abstractNumID);

        for (String point : points) {
            XWPFParagraph bulletParagraph = this.document.createParagraph();
            bulletParagraph.setStyle("Normal");
            bulletParagraph.setNumID(numID);
            XWPFRun bulletRun = bulletParagraph.createRun();
            bulletRun.setText(point);
        }
    }

    /**
     * Inserts a page break in the document.
     */
    private void insertPageBreak() {
        XWPFParagraph paragraph = this.document.createParagraph();
        XWPFRun run = paragraph.createRun();
        run.addBreak(org.apache.poi.xwpf.usermodel.BreakType.PAGE);
    }

	// END EXTRA CODE
}
